<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Distribution\Service;

use FjodorMaller\Distribution\Api\Data\Distribution\AdapterPoolInterface;
use FjodorMaller\Distribution\Api\DistributionRepositoryInterface;
use FjodorMaller\Distribution\Api\DistributionServiceInterface;
use League\Flysystem\FilesystemFactory;
use League\Flysystem\FilesystemInterface;
use Magento\Framework\DataObject;
use Magento\Framework\Exception\LocalizedException;
use Psr\Log\LoggerInterface;

/**
 * Class Distribution
 */
class Distribution extends DataObject implements DistributionServiceInterface
{
    /**
     * @var LoggerInterface
     */
    protected $_logger;

    /**
     * @var AdapterPoolInterface
     */
    protected $_adapterPool;

    /**
     * @var FilesystemFactory
     */
    protected $_filesystemFactory;

    /**
     * @var DistributionRepositoryInterface
     */
    protected $_distributionRepository;

    /**
     * @param LoggerInterface                 $logger
     * @param AdapterPoolInterface            $pool
     * @param FilesystemFactory               $filesystemFactory
     * @param DistributionRepositoryInterface $distributionRepository
     *
     * @inheritDoc
     */
    public function __construct(
        LoggerInterface $logger,
        AdapterPoolInterface $pool,
        FilesystemFactory $filesystemFactory,
        DistributionRepositoryInterface $distributionRepository,
        array $data = []
    ) {
        parent::__construct($data);
        $this->_logger                 = $logger;
        $this->_adapterPool            = $pool;
        $this->_filesystemFactory      = $filesystemFactory;
        $this->_distributionRepository = $distributionRepository;
    }

    /**
     * Returns the filesystem for given adapter code with options.
     *
     * @param string $adapterCode
     * @param array  $options
     *
     * @return FilesystemInterface|null
     * @throws \InvalidArgumentException|\Exception
     */
    public function getFilesystem($adapterCode, array $options = [])
    {
        if ($this->_adapterPool->hasAdapters()) {
            foreach ($this->_adapterPool->getAdapters() as $adapter) {
                if ($adapter->getCode() == $adapterCode) {
                    return $adapter->createFilesystem($options);
                }
            }
        }

        return null;
    }

    /**
     * @inheritDoc
     */
    public function getFilesystemByDistributionId($distributionId)
    {
        try {
            $distribution = $this->_distributionRepository->getById($distributionId);

            return $this->getFilesystem(
                $distribution->getAdapter(),
                $distribution->getOptions()
            );
        } catch (\Exception $e) {
            $this->_logger->addError($e);
        }

        return null;
    }

    /**
     * @inheritdoc
     */
    public function isValidDistribution($distributionId)
    {
        try {
            $model = $this->_distributionRepository->getById($distributionId);

            return $this->isValidAdapter(
                $model->getAdapter(),
                $model->getOptions()[ $model->getAdapter() ] ?? []
            );
        } catch (LocalizedException $e) {
            $this->_logger->addError($e);
        }

        return false;
    }

    /**
     * @inheritdoc
     */
    public function isValidAdapter($adapter, array $options)
    {
        try {
            $filename   = '____distribution_connection_check___';
            $filesystem = $this->getFilesystem($adapter, $options[ $adapter ] ?? $options);
            if ($filesystem) {
                if (!$filesystem->has($filename)) {
                    $filesystem->write($filename, time());
                }

                return $filesystem->delete($filename);
            }
        } catch (\Exception $e) {
            $this->_logger->addError($e);
        }

        return false;
    }
}
