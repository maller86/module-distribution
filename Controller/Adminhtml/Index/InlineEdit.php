<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Distribution\Controller\Adminhtml\Index;

use FjodorMaller\Distribution\Api\Data\DistributionInterface;
use Magento\Framework\Controller\Result\Json;
use Magento\Framework\Controller\ResultFactory;
use Magento\Framework\Exception\LocalizedException;

/**
 * Class InlineEdit
 */
class InlineEdit extends Base
{
    /**
     * @inheritdoc
     */
    public function execute()
    {
        $messages = [];
        $error    = false;
        /* @var $resultJson Json */
        $resultJson = $this->resultFactory->create(ResultFactory::TYPE_JSON);
        $postItems  = $this->getRequest()->getParam('items', []);
        if (!($this->getRequest()->getParam('isAjax') && count($postItems))) {
            return $resultJson->setData([
                'messages' => [__('Please correct the data sent.')],
                'error'    => true,
            ]);
        }
        foreach (array_keys($postItems) as $id) {
            $model = $this->_repository->getById($id);
            try {
                $data = $postItems[ $id ];
                $model->setData($data);
                $this->_repository->save($model);
            } catch (LocalizedException $e) {
                $messages[] = $this->getErrorWithDistributionId($model, $e->getMessage());
                $error      = true;
            } catch (\Exception $e) {
                $messages[] = $this->getErrorWithDistributionId(
                    $model,
                    __('Something went wrong while saving the distribution.')
                );
                $error      = true;
            }
        }

        return $resultJson->setData([
            'messages' => $messages,
            'error'    => $error,
        ]);
    }

    /**
     * Returns error string with given distribution id and error text.
     *
     * @param DistributionInterface $model
     * @param string                $errorText
     *
     * @return string
     */
    protected function getErrorWithDistributionId(DistributionInterface $model, $errorText)
    {
        return sprintf('[Distribution Id: %d] %s', $model->getId(), $errorText);
    }
}
