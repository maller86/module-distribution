<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Distribution\Controller\Adminhtml\Index;

use FjodorMaller\Distribution\Api\Data\DistributionInterface;
use FjodorMaller\Distribution\Model\System\Config\Source\Distribution\Health;
use Magento\Backend\Model\View\Result\Redirect;
use Magento\Framework\Controller\ResultFactory;
use Magento\Framework\Exception\LocalizedException;

/**
 * Class MassCheck
 */
class MassCheck extends Base
{
    /**
     * @inheritdoc
     * @throws LocalizedException
     */
    public function execute()
    {
        $success    = [];
        $collection = $this->_massActionFilter->getCollection($this->_collectionFactory->create());
        /* @var $model DistributionInterface */
        foreach ($collection as $model) {
            $health = Health::DEAD;
            if ($this->_distributionService->isValidAdapter($model->getAdapter(), $model->getOptions())) {
                $health    = Health::ALIVE;
                $success[] = $model->getName();
            }
            $model->setHealth($health);
            $model->setLastCheck($this->_dateTime->formatDate(true));
            $this->_repository->save($model);
        }
        if (empty($success)) {
            $this->messageManager->addErrorMessage(
                __('None of the selected %1 distributions passed the check.', $collection->getSize())
            );
        } elseif (count($success) != $collection->count()) {
            $this->messageManager->addSuccessMessage(
                __('%1 of %1 distributions passed the check.', count($success), $collection->getSize())
            );
        } else {
            $this->messageManager->addErrorMessage(
                __('All %1 selected distributions passed the check.', $collection->getSize())
            );
        }
        /* @var $resultRedirect Redirect */
        $resultRedirect = $this->resultFactory->create(ResultFactory::TYPE_REDIRECT);

        return $resultRedirect->setPath('*/*/');
    }
}
