<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Distribution\Controller\Adminhtml\Index;

use FjodorMaller\Distribution\Api\Data\DistributionInterfaceFactory as InterfaceFactory;
use FjodorMaller\Distribution\Api\DistributionRepositoryInterface as RepositoryInterface;
use FjodorMaller\Distribution\Api\DistributionServiceInterface;
use FjodorMaller\Distribution\Model\ResourceModel\Distribution\CollectionFactory as CollectionFactory;
use Magento\Backend\App\Action;
use Magento\Backend\App\Action\Context;
use Magento\Backend\Helper\Js as JsHelper;
use Magento\Backend\Model\View\Result\ForwardFactory as ResultForwardFactory;
use Magento\Backend\Model\View\Result\Page;
use Magento\Framework\App\Request\DataPersistorInterface;
use Magento\Framework\App\Response\Http\FileFactory;
use Magento\Framework\Controller\Result\Redirect;
use Magento\Framework\Registry as CoreRegistry;
use Magento\Framework\Stdlib\DateTime;
use Magento\Framework\View\Result\LayoutFactory as ResultLayoutFactory;
use Magento\Framework\View\Result\PageFactory as ResultPageFactory;
use Magento\Ui\Component\MassAction\Filter as MassActionFilter;

/**
 * Class Base
 */
abstract class Base extends Action
{
    const ADMIN_RESOURCE = 'FjodorMaller_Distribution::distributions';

    /**
     * @var DateTime
     */
    protected $_dateTime;

    /**
     * @var InterfaceFactory
     */
    protected $_factory;

    /**
     * @var RepositoryInterface
     */
    protected $_repository;

    /**
     * @var PostDataProcessor
     */
    protected $_dataProcessor;

    /**
     * @var DataPersistorInterface
     */
    protected $_dataPersistor;

    /**
     * @var CollectionFactory
     */
    protected $_collectionFactory;

    /**
     * @var JsHelper
     */
    protected $_jsHelper;

    /**
     * @var FileFactory
     */
    protected $_fileFactory;

    /**
     * @var CoreRegistry
     */
    protected $_coreRegistry;

    /**
     * @var MassActionFilter
     */
    protected $_massActionFilter;

    /**
     * @var ResultPageFactory
     */
    protected $_resultPageFactory;

    /**
     * @var ResultLayoutFactory
     */
    protected $_resultLayoutFactory;

    /**
     * @var ResultForwardFactory
     */
    protected $_resultForwardFactory;

    /**
     * @var DistributionServiceInterface
     */
    protected $_distributionService;

    /**
     * @param JsHelper                     $jsHelper
     * @param DateTime                     $dateTime
     * @param FileFactory                  $fileFactory
     * @param InterfaceFactory             $factory
     * @param CoreRegistry                 $coreRegistry
     * @param RepositoryInterface          $repository
     * @param PostDataProcessor            $dataProcessor
     * @param MassActionFilter             $massActionFilter
     * @param CollectionFactory            $collectionFactory
     * @param ResultPageFactory            $resultPageFactory
     * @param DataPersistorInterface       $dataPersistor
     * @param ResultLayoutFactory          $resultLayoutFactory
     * @param ResultForwardFactory         $resultForwardFactory
     * @param DistributionServiceInterface $distributionService
     *
     * @inheritdoc
     */
    public function __construct(
        Context $context,
        JsHelper $jsHelper,
        DateTime $dateTime,
        FileFactory $fileFactory,
        InterfaceFactory $factory,
        CoreRegistry $coreRegistry,
        RepositoryInterface $repository,
        PostDataProcessor $dataProcessor,
        MassActionFilter $massActionFilter,
        CollectionFactory $collectionFactory,
        ResultPageFactory $resultPageFactory,
        DataPersistorInterface $dataPersistor,
        ResultLayoutFactory $resultLayoutFactory,
        ResultForwardFactory $resultForwardFactory,
        DistributionServiceInterface $distributionService
    ) {
        $this->_factory              = $factory;
        $this->_jsHelper             = $jsHelper;
        $this->_dateTime             = $dateTime;
        $this->_repository           = $repository;
        $this->_fileFactory          = $fileFactory;
        $this->_coreRegistry         = $coreRegistry;
        $this->_dataProcessor        = $dataProcessor;
        $this->_dataPersistor        = $dataPersistor;
        $this->_massActionFilter     = $massActionFilter;
        $this->_collectionFactory    = $collectionFactory;
        $this->_resultPageFactory    = $resultPageFactory;
        $this->_resultLayoutFactory  = $resultLayoutFactory;
        $this->_distributionService  = $distributionService;
        $this->_resultForwardFactory = $resultForwardFactory;
        parent::__construct($context);
    }

    /**
     * Returns prepared result page.
     *
     * @return Page
     */
    protected function _initAction()
    {
        /* @var $result Page */
        $result = $this->_resultPageFactory->create();
        $result->setActiveMenu('FjodorMaller_Distribution::distributions');
        $result->addBreadcrumb(__('Manage Distributions'), __('Manage Distributions'));

        return $result;
    }

    /**
     * Returns redirect result from parameter 'back'.
     *
     * @param Redirect $resultRedirect
     * @param array    $params
     *
     * @return Redirect
     */
    protected function _getBackResultRedirect(Redirect $resultRedirect, array $params = [])
    {
        switch ($this->getRequest()->getParam('back')) {
            case 'edit':
                $resultRedirect->setPath('*/*/edit', array_merge([
                    '_current' => true,
                ], $params));
                break;
            case 'new':
                $resultRedirect->setPath('*/*/new', ['_current' => true]);
                break;
            default:
                $resultRedirect->setPath('*/*/');
        }

        return $resultRedirect;
    }
}
