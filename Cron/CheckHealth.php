<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Distribution\Cron;

use FjodorMaller\Distribution\Api\Data\DistributionInterface;
use FjodorMaller\Distribution\Api\DistributionRepositoryInterface as RepositoryInterface;
use FjodorMaller\Distribution\Helper\Data as Helper;
use FjodorMaller\Distribution\Model\ResourceModel\Distribution\Collection;
use FjodorMaller\Distribution\Model\ResourceModel\Distribution\CollectionFactory;
use FjodorMaller\Distribution\Model\System\Config\Source\Distribution\Health;
use FjodorMaller\Distribution\Service\Distribution as Service;
use Magento\Framework\Stdlib\DateTime;
use Magento\Framework\Stdlib\DateTime\TimezoneInterface;
use Psr\Log\LoggerInterface;

/**
 * Class CheckHealth
 */
class CheckHealth
{
    /**
     * @var Helper
     */
    protected $_helper;

    /**
     * @var LoggerInterface
     */
    protected $_logger;

    /**
     * @var Service
     */
    protected $_service;

    /**
     * @var DateTime
     */
    protected $_dateTime;

    /**
     * @var TimezoneInterface
     */
    protected $_timezone;

    /**
     * @var RepositoryInterface
     */
    protected $_repository;

    /**
     * @var CollectionFactory
     */
    protected $_collectionFactory;

    /**
     * @param Helper              $helper
     * @param LoggerInterface     $logger
     * @param Service             $service
     * @param DateTime            $dateTime
     * @param TimezoneInterface   $timezone
     * @param RepositoryInterface $repository
     * @param CollectionFactory   $collectionFactory
     */
    public function __construct(
        Helper $helper,
        Service $service,
        DateTime $dateTime,
        LoggerInterface $logger,
        TimezoneInterface $timezone,
        RepositoryInterface $repository,
        CollectionFactory $collectionFactory
    ) {
        $this->_helper            = $helper;
        $this->_logger            = $logger;
        $this->_service           = $service;
        $this->_dateTime          = $dateTime;
        $this->_timezone          = $timezone;
        $this->_repository        = $repository;
        $this->_collectionFactory = $collectionFactory;
    }

    /**
     * Executes the cron job.
     *
     * @return void
     */
    public function execute()
    {
        if (!$this->_helper->isCronEnabled()) {
            return;
        }
        try {
            /* @var $collection Collection */
            $collection = $this->_collectionFactory->create();
            if ($this->_helper->isCheckActiveOnly()) {
                $collection->addActiveFilter(true);
            }
            /* @var $distribution DistributionInterface */
            foreach ($collection as $distribution) {
                $dateNow = $this->_dateTime->formatDate(true);
                $isValid = $this->_service->isValidAdapter(
                    $distribution->getAdapter(),
                    $distribution->getOptions()
                );
                $distribution->setHealth(Health::BLEEDING);
                if ($isValid) {
                    $distribution->setHealth(Health::ALIVE);
                    $distribution->setLastAlive($dateNow);
                } elseif ($distribution->getLastAlive() && $distribution->getLastCheck()) {
                    $lastAlive = $this->_timezone->date($distribution->getLastAlive());
                    $lastCheck = $this->_timezone->date($distribution->getLastCheck());
                    if (($lastAlive->getTimestamp() - $this->_helper->getDeadInterval()) < $lastCheck->getTimestamp()) {
                        $distribution->setHealth(Health::DEAD);
                    }
                }
                $distribution->setLastCheck($dateNow);
                $this->_repository->save($distribution);
            }
        } catch (\Exception $e) {
            $this->_logger->addError($e->getMessage());
        }
    }
}
