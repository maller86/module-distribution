<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Distribution\Ui\Component\Form;

use FjodorMaller\Distribution\Api\Data\Distribution\AdapterPoolInterface;
use FjodorMaller\Distribution\Api\Data\DistributionInterface;
use Magento\Framework\View\Element\UiComponent\ContextInterface;
use Magento\Ui\Component\Form\Field;
use Magento\Ui\Component\Form\FieldFactory;
use Magento\Ui\Component\Form\Fieldset as ComponentFieldset;
use Psr\Log\LoggerInterface;

/**
 * Class Fieldset
 */
class Fieldset extends ComponentFieldset
{
    /**
     * @var AdapterPoolInterface
     */
    protected $_pool;

    /**
     * @var LoggerInterface
     */
    protected $_logger;

    /**
     * @var FieldFactory
     */
    protected $_fieldFactory;

    /**
     * @var string[]
     */
    protected $_visibleComponentWhitelist = [
        'date',
        'yesno',
        'input',
        'select',
        'fieldset',
        'textarea',
    ];

    /**
     * @param LoggerInterface      $logger
     * @param FieldFactory         $fieldFactory
     * @param AdapterPoolInterface $adapterPool
     *
     * @inheritdoc
     */
    public function __construct(
        LoggerInterface $logger,
        FieldFactory $fieldFactory,
        AdapterPoolInterface $adapterPool,
        ContextInterface $context,
        $components = [],
        array $data = []
    ) {
        parent::__construct($context, $components, $data);
        $this->_logger       = $logger;
        $this->_pool         = $adapterPool;
        $this->_fieldFactory = $fieldFactory;
    }

    /**
     * Returns the adapter toggle scope.
     *
     * @return string
     */
    public function getAdapterToggleScope()
    {
        return 'distribution_form.distribution_form.general.adapter';
    }

    /**
     * @inheritdoc
     */
    public function getChildComponents()
    {
        if (!$this->hasData('____initialized') && $this->_pool->hasAdapters()) {
            $this->setData('____initialized', true);
            $componentTemplate = 'Magento_Catalog/js/components/visible-on-option/%s';
            foreach ($this->_pool->getAdapters() as $adapter) {
                /* @var $fieldSet Field */
                $fieldSet = $this->_fieldFactory->create();
                $fieldSet->setData([
                    'name'   => $adapter->getCode(),
                    'config' => [
                        'collapsible'      => true,
                        'formElement'      => 'fieldset',
                        'label'            => $adapter->getName(),
                        'source'           => DistributionInterface::PARAM_NAME,
                        'sortOrder'        => (1 + count($this->components)) * 10,
                        'component'        => sprintf($componentTemplate, 'fieldset'),
                        'dataScope'        => sprintf('options.%s', $adapter->getCode()),
                        'valuesForOptions' => [
                            $adapter->getCode() => $adapter->getCode(),
                        ],
                        'imports'          => [
                            'toggleVisibility' => sprintf('%s:value', $this->getAdapterToggleScope()),
                        ],
                    ],
                ]);
                foreach ($adapter->getFormFields() as $fieldData) {
                    /* @var $field Field */
                    $field = $this->_fieldFactory->create();
                    if (in_array($fieldData[ 'config' ][ 'formElement' ], $this->_visibleComponentWhitelist)) {
                        $fieldData[ 'config' ][ 'component' ] = sprintf(
                            $componentTemplate,
                            $fieldData[ 'config' ][ 'formElement' ]
                        );
                    }
                    $field->setData(array_merge_recursive([
                        'config' => [
                            'dataType'         => 'text',
                            'source'           => DistributionInterface::PARAM_NAME,
                            'dataScope'        => $fieldData[ 'name' ],
                            'sortOrder'        => (1 + count($fieldSet->getChildComponents())) * 10,
                            'valuesForOptions' => [
                                $adapter->getCode() => $adapter->getCode(),
                            ],
                            'imports'          => [
                                'toggleVisibility' => sprintf('%s:value', $this->getAdapterToggleScope()),
                            ],
                        ],
                    ], $fieldData));
                    $fieldSet->addComponent($fieldData[ 'name' ], $field);
                }
                $fieldSet->prepare();
                $this->addComponent($adapter->getCode(), $fieldSet);
            }
        }

        return parent::getChildComponents();
    }
}
