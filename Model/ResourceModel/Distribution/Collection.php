<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Distribution\Model\ResourceModel\Distribution;

use FjodorMaller\Distribution\Api\Data\DistributionInterface;
use FjodorMaller\Distribution\Model\Distribution;
use FjodorMaller\Distribution\Model\ResourceModel\Distribution as DistributionResource;
use Magento\Framework\Data\Collection\Db\FetchStrategyInterface;
use Magento\Framework\Data\Collection\EntityFactoryInterface;
use Magento\Framework\DB\Adapter\AdapterInterface;
use Magento\Framework\Event\ManagerInterface;
use Magento\Framework\Model\ResourceModel\Db\AbstractDb;
use Magento\Framework\Model\ResourceModel\Db\Collection\AbstractCollection;
use Magento\Framework\Stdlib\DateTime;
use Psr\Log\LoggerInterface;

/**
 * Class Collection
 */
class Collection extends AbstractCollection
{
    /**
     * @inheritdoc
     */
    protected $_idFieldName = DistributionInterface::DISTRIBUTION_ID;

    /**
     * @inheritdoc
     */
    protected $_eventPrefix = 'distribution_distribution_collection';

    /**
     * @inheritdoc
     */
    protected $_eventObject = 'distribution_collection';

    /**
     * @var DateTime
     */
    protected $_dateTime;

    /**
     * @param DateTime $dateTime
     *
     * @inheritdoc
     */
    public function __construct(
        DateTime $dateTime,
        EntityFactoryInterface $entityFactory,
        LoggerInterface $logger,
        FetchStrategyInterface $fetchStrategy,
        ManagerInterface $eventManager,
        AdapterInterface $connection = null,
        AbstractDb $resource = null
    ) {
        $this->_dateTime = $dateTime;
        parent::__construct($entityFactory, $logger, $fetchStrategy, $eventManager, $connection, $resource);
    }

    /**
     * @inheritdoc
     */
    protected function _construct()
    {
        $this->_init(Distribution::class, DistributionResource::class);
    }

    /**
     * Adds adapter filters.
     *
     * @param string[] $adapters
     *
     * @return $this
     */
    public function addAdapterFilter($adapters)
    {
        return $this->addFieldToFilter(DistributionInterface::ADAPTER, ['in' => (array)$adapters]);
    }

    /**
     * Adds active filter.
     *
     * @param bool $bool
     *
     * @return $this
     */
    public function addActiveFilter($bool)
    {
        return $this->addFieldToFilter(DistributionInterface::IS_ACTIVE, ['eq' => (bool)$bool]);
    }

    /**
     * Adds not checked filter.
     *
     * @return $this
     */
    public function addNotCheckedFilter()
    {
        return $this->addCheckFilter();
    }

    /**
     * Adds check filter with given dates.
     *
     * @param null|string $dateFrom
     * @param null|string $dateTo
     *
     * @return $this
     */
    public function addCheckFilter($dateFrom = null, $dateTo = null)
    {
        if (null === $dateFrom && null === $dateTo) {
            return $this->addFieldToFilter(DistributionInterface::LAST_CHECK, ['null' => true]);
        }
        if (null !== $dateFrom) {
            $this->addFieldToFilter(DistributionInterface::LAST_CHECK, [
                'gteq' => $this->_dateTime->formatDate((null === $dateTo ? true : $dateTo)),
            ]);
        }
        if (null !== $dateTo) {
            $this->addFieldToFilter(DistributionInterface::LAST_CHECK, [
                'lteq' => $this->_dateTime->formatDate((null === $dateFrom ? true : $dateFrom)),
            ]);
        }

        return $this;
    }

    /**
     * @inheritdoc
     */
    protected function _afterLoad()
    {
        if (get_class($this) === self::class) {
            $this->walk([
                $this->_resource,
                'unserializeFields',
            ]);
        }

        return parent::_afterLoad();
    }
}
