<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Distribution\Model;

use FjodorMaller\Distribution\Api\Data\DistributionInterface;
use FjodorMaller\Distribution\Api\Data\DistributionSearchResultsInterface;
use FjodorMaller\Distribution\Api\Data\DistributionSearchResultsInterfaceFactory;
use FjodorMaller\Distribution\Api\DistributionRepositoryInterface;
use FjodorMaller\Distribution\Model\ResourceModel\Distribution as ResourceDistribution;
use FjodorMaller\Distribution\Model\ResourceModel\Distribution\Collection as DistributionCollection;
use FjodorMaller\Distribution\Model\ResourceModel\Distribution\CollectionFactory as DistributionCollectionFactory;
use Magento\Framework\Api\SearchCriteria\CollectionProcessorInterface;
use Magento\Framework\Api\SearchCriteriaInterface;
use Magento\Framework\Exception\CouldNotDeleteException;
use Magento\Framework\Exception\CouldNotSaveException;
use Magento\Framework\Exception\NoSuchEntityException;

/**
 * Class DistributionRepository
 */
class DistributionRepository implements DistributionRepositoryInterface
{
    /**
     * @var DistributionFactory
     */
    protected $_factory;

    /**
     * @var ResourceDistribution
     */
    protected $_resource;

    /**
     * @var DistributionCollectionFactory
     */
    protected $_collectionFactory;

    /**
     * @var CollectionProcessorInterface
     */
    protected $_collectionProcessor;

    /**
     * @var DistributionSearchResultsInterfaceFactory
     */
    protected $_searchResultFactory;

    /**
     * @param DistributionFactory                       $factory
     * @param ResourceDistribution                      $resource
     * @param DistributionCollectionFactory             $collectionFactory
     * @param DistributionSearchResultsInterfaceFactory $searchResultsInterfaceFactory
     * @param CollectionProcessorInterface              $collectionProcessor
     */
    public function __construct(
        DistributionFactory $factory,
        ResourceDistribution $resource,
        DistributionCollectionFactory $collectionFactory,
        DistributionSearchResultsInterfaceFactory $searchResultsInterfaceFactory,
        CollectionProcessorInterface $collectionProcessor
    ) {
        $this->_factory             = $factory;
        $this->_resource            = $resource;
        $this->_collectionFactory   = $collectionFactory;
        $this->_collectionProcessor = $collectionProcessor;
        $this->_searchResultFactory = $searchResultsInterfaceFactory;
    }

    /**
     * @inheritdoc
     */
    public function save(DistributionInterface $model)
    {
        try {
            $this->_resource->save($model);
        } catch (\Exception $exception) {
            throw new CouldNotSaveException(
                __('Could not save the distribution: %1', $exception->getMessage()),
                $exception
            );
        }

        return $model;
    }

    /**
     * @inheritdoc
     */
    public function getById($id)
    {
        $model = $this->_factory->create();
        $model->load($id);
        if (!$model->getId()) {
            throw new NoSuchEntityException(__('Distribution with id "%1" does not exist.', $id));
        }

        return $model;
    }

    /**
     * @inheritdoc
     */
    public function getList(SearchCriteriaInterface $searchCriteria)
    {
        /* @var $collection DistributionCollection */
        $collection = $this->_collectionFactory->create();
        $this->_collectionProcessor->process($searchCriteria, $collection);
        /* @var $result DistributionSearchResultsInterface */
        $result = $this->_searchResultFactory->create();
        $result->setSearchCriteria($searchCriteria);
        $result->setItems($collection->getItems());
        $result->setTotalCount($collection->getSize());

        return $result;
    }

    /**
     * @inheritdoc
     */
    public function delete(DistributionInterface $model)
    {
        try {
            $this->_resource->delete($model);
        } catch (\Exception $exception) {
            throw new CouldNotDeleteException(__('Could not delete the distribution: %1', $exception->getMessage()));
        }

        return true;
    }

    /**
     * @inheritdoc
     */
    public function deleteById($id)
    {
        return $this->delete($this->getById($id));
    }
}
