<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Distribution\Model\Distribution\Adapter;

use Enl\Flysystem\Cloudinary\CloudinaryAdapterFactory as AdapterFactory;
use Enl\Flysystem\Cloudinary\ApiFacadeFactory as CloudinaryClientFactory;
use Enl\Flysystem\Cloudinary\CloudinaryAdapterFactory;
use League\Flysystem\FilesystemFactory;

/**
 * Class Cloudinary
 */
class Cloudinary extends BaseAdapter
{
    /**
     * @var AdapterFactory
     */
    protected $_adapterFactory;

    /**
     * @var FilesystemFactory
     */
    protected $_filesystemFactory;

    /**
     * @var CloudinaryClientFactory
     */
    protected $_cloudinaryClientFactory;

    /**
     * @var CloudinaryAdapterFactory
     */
    protected $_cloudinaryAdapterFactory;

    /**
     * @param CloudinaryAdapterFactory $adapterFactory
     * @param FilesystemFactory        $filesystemFactory
     * @param CloudinaryClientFactory  $cloudinaryClientFactory
     * @param CloudinaryAdapterFactory $cloudinaryAdapterFactory
     *
     * @inheritdoc
     */
    public function __construct(
        AdapterFactory $adapterFactory,
        FilesystemFactory $filesystemFactory,
        CloudinaryClientFactory $cloudinaryClientFactory,
        CloudinaryAdapterFactory $cloudinaryAdapterFactory,
        array $data = []
    ) {
        $this->_adapterFactory           = $adapterFactory;
        $this->_filesystemFactory        = $filesystemFactory;
        $this->_cloudinaryClientFactory  = $cloudinaryClientFactory;
        $this->_cloudinaryAdapterFactory = $cloudinaryAdapterFactory;
        parent::__construct($data);
    }

    /**
     * @inheritdoc
     */
    public function getFormFields()
    {
        return [
            'field_cloud_name' => [
                'name'   => 'cloud_name',
                'config' => [
                    'label'       => __('Cloud Name'),
                    'value'       => '',
                    'formElement' => 'input',
                    'validation'  => [
                        'required-entry' => true,
                    ],
                ],
            ],
            'field_api_key'    => [
                'name'   => 'api_key',
                'config' => [
                    'label'       => __('API Key'),
                    'value'       => '',
                    'formElement' => 'input',
                    'validation'  => [
                        'required-entry' => true,
                    ],
                ],
            ],
            'field_api_secret' => [
                'name'   => 'api_secret',
                'config' => [
                    'label'       => __('API Secret'),
                    'value'       => '',
                    'formElement' => 'input',
                    'validation'  => [
                        'required-entry' => true,
                    ],
                ],
            ],
            'field_overwrite'  => [
                'name'   => 'overwrite',
                'config' => [
                    'label'       => __('Overwrite'),
                    'value'       => '1',
                    'formElement' => 'checkbox',
                    'notice'      => __('Overwrite files on remote path if they already exists.'),
                    'prefer'      => 'toggle',
                    'valueMap'    => [
                        'false' => '0',
                        'true'  => '1',
                    ],
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function createFilesystem(array $options = [])
    {
        $this->ensureRequiredOptions($options);
        $client     = $this->_cloudinaryClientFactory->create([
            'cloud_name' => $options[ 'cloud_name' ],
            'api_key'    => $options[ 'api_key' ],
            'api_secret' => $options[ 'api_secret' ],
            'overwrite'  => (bool)$options[ 'overwrite' ],
        ]);
        $adapter    = $this->_cloudinaryAdapterFactory->create([
            'client' => $client,
        ]);
        $filesystem = $this->_filesystemFactory->create([
            'adapter' => $adapter,
            'config'  => [
                'disable_asserts' => true,
            ],
        ]);

        return $filesystem;
    }
}
