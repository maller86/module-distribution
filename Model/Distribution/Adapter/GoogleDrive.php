<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Distribution\Model\Distribution\Adapter;

use Hypweb\Flysystem\GoogleDrive\GoogleDriveAdapterFactory;
use League\Flysystem\FilesystemFactory;

/**
 * Class GoogleDrive
 */
class GoogleDrive extends BaseAdapter
{
    /**
     * @var FilesystemFactory
     */
    protected $_filesystemFactory;

    /**
     * @var GoogleDriveAdapterFactory
     */
    protected $_googleDriveAdapterFactory;

    /**
     * @param FilesystemFactory         $filesystemFactory
     * @param GoogleDriveAdapterFactory $googleDriveAdapterFactory
     *
     * @inheritdoc
     */
    public function __construct(
        FilesystemFactory $filesystemFactory,
        GoogleDriveAdapterFactory $googleDriveAdapterFactory,
        array $data = []
    ) {
        parent::__construct($data);
        $this->_filesystemFactory         = $filesystemFactory;
        $this->_googleDriveAdapterFactory = $googleDriveAdapterFactory;
    }

    /**
     * @inheritdoc
     */
    public function getFormFields()
    {
        return [
            'field_client_id'     => [
                'name'   => 'client_id',
                'config' => [
                    'label'       => __('Client Id'),
                    'value'       => '',
                    'formElement' => 'input',
                    'validation'  => [
                        'required-entry' => true,
                    ],
                ],
            ],
            'field_client_secret' => [
                'name'   => 'client_secret',
                'config' => [
                    'label'       => __('Client Secret'),
                    'value'       => '',
                    'formElement' => 'input',
                    'validation'  => [
                        'required-entry' => true,
                    ],
                ],
            ],
            'field_refresh_token' => [
                'name'   => 'refresh_token',
                'config' => [
                    'label'       => __('Refresh Token'),
                    'value'       => '',
                    'formElement' => 'input',
                    'validation'  => [
                        'required-entry' => true,
                    ],
                ],
            ],
            'field_folder_id'     => [
                'name'   => 'folder_id',
                'config' => [
                    'label'       => __('Folder Id'),
                    'value'       => 'root',
                    'formElement' => 'input',
                    'notice'      => 'Enter the folder id on Google Drive. Default: "root"',
                    'validation'  => [
                        'required-entry' => true,
                    ],
                ],
            ],
            'field_path'          => [
                'name'   => 'root',
                'config' => [
                    'label'       => __('Path'),
                    'value'       => '',
                    'notice'      => __('The remote path to enter after connection successfully established.'),
                    'formElement' => 'input',
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function createFilesystem(array $options = [])
    {
        $this->ensureRequiredOptions($options);
        $client = new \Google_Client();
        $client->setClientId($options[ 'client_id' ]);
        $client->setClientSecret($options[ 'client_secret' ]);
        $client->refreshToken($options[ 'refresh_token' ]);
        $adapter = $this->_googleDriveAdapterFactory->create([
            'service' => new \Google_Service_Drive($client),
            'root'    => $options[ 'folder_id' ],
        ]);
        $adapter->setPathPrefix($options[ 'path' ]);
        $filesystem = $this->_filesystemFactory->create([
            'adapter' => $adapter,
        ]);

        return $filesystem;
    }
}
