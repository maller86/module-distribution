<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Distribution\Model\Distribution\Adapter;

use FjodorMaller\Base\Model\Form\BaseOptionItem;
use FjodorMaller\Distribution\Api\Data\Distribution\OptionAdapterInterface;

/**
 * Class BaseAdapter
 */
abstract class BaseAdapter extends BaseOptionItem implements OptionAdapterInterface
{
    /**
     * @inheritdoc
     */
    public function getName()
    {
        $result = $this->getData('name');
        if (!$result) {
            throw new \InvalidArgumentException(sprintf('No name set in class "%s".', get_class($this)));
        }

        return $result;
    }

    /**
     * @inheritdoc
     */
    public function getCode()
    {
        $result = $this->getData('code');
        if (!$result) {
            throw new \InvalidArgumentException(sprintf('No code set in class "%s".', get_class($this)));
        }

        return $result;
    }

    /**
     * @inheritdoc
     */
    public function getFormFields()
    {
        return (array)$this->getData('form_fields');
    }

    /**
     * Returns the required field names.
     *
     * @return string[]
     */
    protected function getRequiredFields()
    {
        $result = [];
        $fields = $this->getFormFields();
        foreach ($fields as $field) {
            if (!isset($field[ 'config' ][ 'validation' ])) {
                continue;
            }
            if (array_key_exists('required-entry', $field[ 'config' ][ 'validation' ])) {
                $result[] = $field[ 'name' ];
            }
        }

        return $result;
    }

    /**
     * Ensures the given required options are present in given options.
     *
     * @param array    $options
     * @param string[] $required
     * @param bool     $graceful
     *
     * @return bool|$this
     * @throws \InvalidArgumentException
     */
    protected function ensureRequiredOptions(array $options, array $required = [], $graceful = false)
    {
        $required = array_merge($this->getRequiredFields(), $required);
        foreach ($required as $option) {
            if (!array_key_exists($option, $options)) {
                if ($graceful) {
                    return false;
                }
                throw new \InvalidArgumentException(
                    sprintf(
                        'Required option "%s" in adapter "%s" not set.',
                        $option,
                        get_class($this)
                    )
                );
            }
        }
        if ($graceful) {
            return true;
        }

        return $this;
    }
}
