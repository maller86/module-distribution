<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the license that is available in LICENSE file.
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this extension to newer version in the future.
 */

namespace FjodorMaller\Distribution\Model\Distribution\Adapter;

use League\Flysystem\Adapter\LocalFactory as AdapterFactory;
use League\Flysystem\FilesystemFactory;
use Magento\Framework\Filesystem\DirectoryList;

/**
 * Class Local
 */
class Local extends BaseAdapter
{
    /**
     * @var DirectoryList
     */
    protected $_directoryList;

    /**
     * @var AdapterFactory
     */
    protected $_adapterFactory;

    /**
     * @var FilesystemFactory
     */
    protected $_filesystemFactory;

    /**
     * @param DirectoryList     $directoryList
     * @param AdapterFactory    $adapterFactory
     * @param FilesystemFactory $filesystemFactory
     *
     * @inheritdoc
     */
    public function __construct(
        DirectoryList $directoryList,
        AdapterFactory $adapterFactory,
        FilesystemFactory $filesystemFactory,
        array $data = []
    ) {
        $this->_directoryList     = $directoryList;
        $this->_adapterFactory    = $adapterFactory;
        $this->_filesystemFactory = $filesystemFactory;
        parent::__construct($data);
    }

    /**
     * @inheritdoc
     */
    public function getFormFields()
    {
        return [
            'field_path' => [
                'name'   => 'root',
                'config' => [
                    'label'       => __('Path'),
                    'value'       => '/var/',
                    'notice'      => sprintf(
                        __('The directory from the Magento root "%s". Not existing directories will be created.'),
                        rtrim($this->_directoryList->getRoot(), DIRECTORY_SEPARATOR)
                    ),
                    'formElement' => 'input',
                    'validation'  => [
                        'required-entry' => true,
                    ],
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function createFilesystem(array $options = [])
    {
        $this->ensureRequiredOptions($options);
        $root       = rtrim($this->_directoryList->getRoot(), DIRECTORY_SEPARATOR);
        $root       .= DIRECTORY_SEPARATOR . trim($options[ 'root' ], DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
        $adapter    = $this->_adapterFactory->create([
            'root' => $root,
        ]);
        $fileSystem = $this->_filesystemFactory->create([
            'adapter' => $adapter,
        ]);

        return $fileSystem;
    }
}
